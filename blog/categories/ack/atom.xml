<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ack | Jonathan's Blog]]></title>
  <link href="http://jonathan-li.me/blog/categories/ack/atom.xml" rel="self"/>
  <link href="http://jonathan-li.me/"/>
  <updated>2015-01-09T22:13:57+08:00</updated>
  <id>http://jonathan-li.me/</id>
  <author>
    <name><![CDATA[Jonathan]]></name>
    <email><![CDATA[jonathan.swjtu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何在Linux上提高文本文件的搜索效率]]></title>
    <link href="http://jonathan-li.me/blog/2014/02/26/search-text-files-patterns-efficiently/"/>
    <updated>2014-02-26T00:00:00+08:00</updated>
    <id>http://jonathan-li.me/blog/2014/02/26/search-text-files-patterns-efficiently</id>
    <content type="html"><![CDATA[<p>对于系统管理员或程序员来说，当需要在复杂配置的目录中或者在大型源码树中搜寻特定的文本或模式时，grep类型的工具大概是最受欢迎的。</p>

<p>如果grep是你最喜欢的工具之一，那么你可能会更喜欢ack。ack是一个基于Perl的类似于grep的命令行工具，但是搜索速度更快，能力比grep更强。尤其是当你是程序员时，我强烈推荐你使用ack来取代grep。
ack的用法非常适用与代码搜索，因此程序员可以在源码树中进行复杂的查询，而只需要更少的按键。</p>

<h1>ack的特性</h1>

<p>ack的一些非常强大的特性：</p>

<ul>
<li>默认搜索当前工作目录</li>
<li>默认递归搜索子目录</li>
<li>忽略元数据目录，比如.svn,.git,CSV等目录</li>
<li>忽略二进制文件（比如pdf，image，coredumps)和备份文件（比如foo~,*.swp)</li>
<li>在搜索结果中打印行号，有助于找到目标代码</li>
<li>能搜索特定文件类型（比如Perl,C++,Makefile),该文件类型可以有多种文件后缀</li>
<li>高亮搜索结果</li>
<li>支持Perl的高级正则表达式，比grep所使用GNU正则表达式更有表现力。</li>
</ul>


<!-- more -->


<p>相比于搜索速度，ack总体上比grep更快。ack的速度只要表现在它的内置的文件类型过滤器。在搜索过程中，ack维持着认可的文件类型的列表，同时跳过未知或不必要的文件类型。它同样避免检查多余的元数据目录。</p>

<h1>在Linux上安装ack</h1>

<p>尽管在大多数Linux发行版中是ack是标准包，可轻易获得（比如在基于debian的系统中，是ack-grep包，而在基于Redhat的系统中则是ack包），但是与发行版捆绑的ack版本仍然是1.x,而ack2.0已经发布，而且拥有更多特性。</p>

<p>因此我准备在官方网站下载，然后安装ack。</p>

<p>方便的是，ack在官网可可作为一个单独的Perl脚本获得，其中整合了所有需要依赖的模块。因此，你不需要额外安装Perl模块来运行这脚本。</p>

<p>为了在你的Linux系统中安装ack，去<a href="http://beyondgrep.com/install/">官网</a>下载最新版本的ack。在写本文时，最新的版本是2.12</p>

<pre><code>$ wget http://beyondgrep.com/ack-2.12-single-file
$ sudo mv ack-2.12-single-file /usr/local/bin/ack
$ sudo chmod 0755 /usr/local/bin/ack
</code></pre>

<p>需要注意的是，在基于Debian的系统中，有一个独立的包也叫ack（汉码转换器）。所以如果你碰巧有使用那个包，那么你就必须重命名ack来避免命名冲突了。</p>

<h1>ack的使用案例</h1>

<ol>
<li>在当前目录递归搜索单词&#8221;eat&#8221;,不匹配类似于&#8221;feature&#8221;或&#8221;eating&#8221;的字符串:</li>
</ol>


<p><code>$ ack -w eat</code></p>

<ol>
<li>搜索有特殊字符的字符串&#8217;$path=.&lsquo;,所有的元字符（比如&rsquo;$&lsquo;,&rsquo;.&lsquo;)需要在字面上被匹配:</li>
</ol>


<p><code>$ ack -Q '$path=.' /etc</code></p>

<ol>
<li>除了dowloads目录，在所有目录搜索&#8221;about&#8221;单词:</li>
</ol>


<p><code>$ ack about --ignore-dir=downloads</code></p>

<ol>
<li>只搜索包含&#8217;protected&#8217;单词的PHP文件，然后通过文件名把搜索结果整合在一起，打印每个文件对应的搜索结果:</li>
</ol>


<p><code>$ ack --php --group protected</code></p>

<ol>
<li>获取包含&#8217;CFLAG&#8217;关键字的Makefile的文件名。文件名为*.mk,makefile,Makefile,GNUmakefile的都在考虑范围内:</li>
</ol>


<p><code>$ ack --make -l CFLAG</code></p>

<ol>
<li>显示整个日志文件时高亮匹配到的字符串:</li>
</ol>


<p><code>$ tail -f /var/log/syslog | ack --passthru 192.168.1.10</code></p>

<ol>
<li>要换取ack支持的文件过滤类型，运行：</li>
</ol>


<p><code>$ ack --help-type</code></p>

<hr />

<p><a href="http://xmodulo.com/2014/01/search-text-files-patterns-efficiently.html">原文地址</a></p>
]]></content>
  </entry>
  
</feed>
