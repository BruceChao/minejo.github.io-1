<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Jonathan's Blog]]></title>
  <link href="http://jonathan-li.me/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://jonathan-li.me/"/>
  <updated>2014-10-22T17:09:32+08:00</updated>
  <id>http://jonathan-li.me/</id>
  <author>
    <name><![CDATA[Jonathan]]></name>
    <email><![CDATA[jonathan.swjtu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[通过8个技巧让你成为一个超强的Linux终端用户]]></title>
    <link href="http://jonathan-li.me/blog/2014/02/28/become-a-linux-terminal-power-user-with-these-8-tricks/"/>
    <updated>2014-02-28T16:52:00+08:00</updated>
    <id>http://jonathan-li.me/blog/2014/02/28/become-a-linux-terminal-power-user-with-these-8-tricks</id>
    <content type="html"><![CDATA[<p><img src="http://cdn.howtogeek.com/wp-content/uploads/2012/03/bash-tricks-header.png" alt="ternimal" /></p>

<p>使用Linux终端不仅仅是只输入命令。学习这些基本的技巧，你就会逐渐掌握Bash shell，这个在大多数Linux发行版上默认使用的终端工具。</p>

<p>这篇文章是写给缺乏经验的新手的，我相信大多数高级用户已经知道了所有的这些技巧。但是，你仍然可以看看，也许能学到你一直以来都忽略了的东西。</p>

<h2>Tab键自动补全</h2>

<p>使用Tab键自动补全是基本的技巧。它能节省你很多时间，而且当你不确定一个文件名或者命令怎么拼写时，它也及其有用。</p>

<p>举个例子，比如在当前目录你有一个文件，文件名是“really long file nam”,你想删除这个文件。你可以输入整个文件名，但是你得小心输错空格符（需要用\转义）。如果你输入&#8221;rm r&#8221;，然后按Tab键，Bash会自动为你补全这个文件的名字。</p>

<p>当然，如果当前目录中你有很多以字母r开头的文件，Bash就会不知道你指的是哪一个。比如当前目录你有另一个名字叫做“really very long file name”的文，当你按Tab键时，Bash会补全到“really\”部分，因为两个文件都是以这开头的。然后，再按Tab键你会看到所有能匹配该开头的文件列表，如下图。</p>

<p><img src="http://cdn.howtogeek.com/wp-content/uploads/2012/03/tab-completion1.png" alt="tab" /></p>

<!-- more -->


<p>接着输入你想要的文件名然后按Tab键。这样，当我们输“l”然后按Tab键时，Bash会自动补全我们想要的文件名。</p>

<p>这种方法对于输入命令来说同样适用。当你不确定你想要的命令是什么，只记得以&#8221;gnome&#8221;开头时，输入“gnome”然后按Tab键，你就会看到所有可能的结果。</p>

<h2>管道命令</h2>

<p>管道命令允许你把一个命令的输出结果转移给另一个命令。在Unix的设计哲学中，每个程序都是只有少而精的功能。举个例子，&#8221;ls&#8221;命令会显示当前目录中所有的文件列表，而&#8221;grep&#8221;命令会在制定的地方搜索输入的字符串。</p>

<p>把这两者通过管道命令（用“|”符号表示)结合起来，你就可以在当前目录搜索某个文件了，以下命令用来搜索“really”：</p>

<pre><code>ls | grep really
</code></pre>

<p><img src="http://cdn.howtogeek.com/wp-content/uploads/2012/03/piping.png" alt="pipe" /></p>

<h2>通配符</h2>

<p>星号&#8221;*&ldquo;是一个可以匹配任何东西的通配符。比如，如果我们想把”really long file name“和”really very long file name“从当前目录都删了，我们可以使用如下命令：</p>

<pre><code>rm really*name
</code></pre>

<p>这个命令删除了所有以really开头，以name结尾的文件。如果你用&#8221;rm *&ldquo;命令，将会删除该目录下的所有文件，所有需谨慎使用。</p>

<p><img src="http://cdn.howtogeek.com/wp-content/uploads/2012/03/wild-card.png" alt="wildcards" /></p>

<h2>输出重定向</h2>

<p>&ldquo;〉&#8221;字符可以把一个命令的输出结果重定向到一个文件，而不需要额外使用另一个命令。比如，下图的代码使用&#8221;ls&#8221;命令来列出当前目录的所有文件，并把输出的列表输入到了一个名为”file1“的文件，而不是仅仅输出显示在终端上。</p>

<pre><code>ls &gt; file1
</code></pre>

<p><img src="http://cdn.howtogeek.com/wp-content/uploads/2012/03/bash-tricks-header1.png" alt="redirection" /></p>

<h2>命令行历史</h2>

<p>Bash会记得你使用过的命令的历史。你可以使用向上键和向下键来翻阅你已经使用过的命令。使用&#8221;history&#8221;命令会把历史命令都打印出来，因此你可以使用管道命令来搜索你最近使用的命令。</p>

<p>关于命令行历史，还有很多可以使用的<a href="http://www.howtogeek.com/howto/44997/how-to-use-bash-history-to-improve-your-command-line-productivity/">技巧</a></p>

<p><img src="http://cdn.howtogeek.com/wp-content/uploads/2012/03/history.png" alt="history" /></p>

<h2>~,.&amp; ..</h2>

<p>波浪符&#8221;~&ldquo;代表当前用户的主目录。所以，你可以使用&#8221;cd ~&#8221;切换到你的主目录，而不用输入&#8221;cd /home/name&#8221;。这对相对路径同样使用，比如&#8221;cd ~/Desktop&#8221;会切换到当前用户的桌面目录。</p>

<p>与之类似的是，&#8221;.&ldquo;代表当前目录，&rdquo;..&ldquo;代表父级目录。所有，&#8221;cd ..&#8221;会跳到父级目录。这对相对路径同样有效，比如你在Desktop目录，你想切换到与Desktop目录同级的Document目录，你可以使用&#8221;cd ../Documents&#8221;命令。</p>

<p><img src="http://cdn.howtogeek.com/wp-content/uploads/2012/03/characters.png" alt="cd" /></p>

<h2>后台运行命令</h2>

<p>默认情况下，Bash会在当前终端下运行你的命令。正常来说没有问题，但是当你想同时运行一个应用程序而又要继续使用该终端时怎么办？比如你输入&#8221;firefox&#8221;命令来运行火狐浏览器，火狐将会占据你的终端并且显示一些错误信息等输出，直到你关闭它。但是加一个&#8221;&amp;&ldquo;符号在命令后面会使Bash在后台运行该程序：</p>

<pre><code>firefox &amp;
</code></pre>

<p><img src="http://cdn.howtogeek.com/wp-content/uploads/2012/03/background-process.png" alt="background" /></p>

<h2>条件执行</h2>

<p>你同样可以用Bash运行两个命令，一个接着一个。第二个命令只有当第一个命令成功运行完毕后才会运行。要想做到这样，把两个命令在同一行中用&#8221;&amp;&amp;&ldquo;分隔即可。</p>

<p>比如，&#8221;sleep&#8221;命令会以秒为单位接受一个参数，然后倒计时，允许结束。单独来用的话，该命令没有任何用处，但是你可以把它作为运行下一个程序之前的延时。下面的命令会停5秒然后运行gnome的截屏工具：</p>

<pre><code>sleep 5 &amp;&amp; gnome-screenshot
</code></pre>

<p>你还有任何想要分享的技巧吗？请留言。</p>

<hr />

<p>原文链接： <a href="http://www.howtogeek.com/110150/become-a-linux-terminal-power-user-with-these-8-tricks/">How-To-Geek</a></p>

<p>[ 转载请保留原文出处、译者和译文链接。]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在Linux上提高文本文件的搜索效率]]></title>
    <link href="http://jonathan-li.me/blog/2014/02/26/search-text-files-patterns-efficiently/"/>
    <updated>2014-02-26T00:00:00+08:00</updated>
    <id>http://jonathan-li.me/blog/2014/02/26/search-text-files-patterns-efficiently</id>
    <content type="html"><![CDATA[<p>对于系统管理员或程序员来说，当需要在复杂配置的目录中或者在大型源码树中搜寻特定的文本或模式时，grep类型的工具大概是最受欢迎的。</p>

<p>如果grep是你最喜欢的工具之一，那么你可能会更喜欢ack。ack是一个基于Perl的类似于grep的命令行工具，但是搜索速度更快，能力比grep更强。尤其是当你是程序员时，我强烈推荐你使用ack来取代grep。
ack的用法非常适用与代码搜索，因此程序员可以在源码树中进行复杂的查询，而只需要更少的按键。</p>

<h1>ack的特性</h1>

<p>ack的一些非常强大的特性：</p>

<ul>
<li>默认搜索当前工作目录</li>
<li>默认递归搜索子目录</li>
<li>忽略元数据目录，比如.svn,.git,CSV等目录</li>
<li>忽略二进制文件（比如pdf，image，coredumps)和备份文件（比如foo~,*.swp)</li>
<li>在搜索结果中打印行号，有助于找到目标代码</li>
<li>能搜索特定文件类型（比如Perl,C++,Makefile),该文件类型可以有多种文件后缀</li>
<li>高亮搜索结果</li>
<li>支持Perl的高级正则表达式，比grep所使用GNU正则表达式更有表现力。</li>
</ul>


<!-- more -->


<p>相比于搜索速度，ack总体上比grep更快。ack的速度只要表现在它的内置的文件类型过滤器。在搜索过程中，ack维持着认可的文件类型的列表，同时跳过未知或不必要的文件类型。它同样避免检查多余的元数据目录。</p>

<h1>在Linux上安装ack</h1>

<p>尽管在大多数Linux发行版中是ack是标准包，可轻易获得（比如在基于debian的系统中，是ack-grep包，而在基于Redhat的系统中则是ack包），但是与发行版捆绑的ack版本仍然是1.x,而ack2.0已经发布，而且拥有更多特性。</p>

<p>因此我准备在官方网站下载，然后安装ack。</p>

<p>方便的是，ack在官网可可作为一个单独的Perl脚本获得，其中整合了所有需要依赖的模块。因此，你不需要额外安装Perl模块来运行这脚本。</p>

<p>为了在你的Linux系统中安装ack，去<a href="http://beyondgrep.com/install/">官网</a>下载最新版本的ack。在写本文时，最新的版本是2.12</p>

<pre><code>$ wget http://beyondgrep.com/ack-2.12-single-file
$ sudo mv ack-2.12-single-file /usr/local/bin/ack
$ sudo chmod 0755 /usr/local/bin/ack
</code></pre>

<p>需要注意的是，在基于Debian的系统中，有一个独立的包也叫ack（汉码转换器）。所以如果你碰巧有使用那个包，那么你就必须重命名ack来避免命名冲突了。</p>

<h1>ack的使用案例</h1>

<ol>
<li>在当前目录递归搜索单词&#8221;eat&#8221;,不匹配类似于&#8221;feature&#8221;或&#8221;eating&#8221;的字符串:</li>
</ol>


<p><code>$ ack -w eat</code></p>

<ol>
<li>搜索有特殊字符的字符串&#8217;$path=.&lsquo;,所有的元字符（比如&rsquo;$&lsquo;,&rsquo;.&lsquo;)需要在字面上被匹配:</li>
</ol>


<p><code>$ ack -Q '$path=.' /etc</code></p>

<ol>
<li>除了dowloads目录，在所有目录搜索&#8221;about&#8221;单词:</li>
</ol>


<p><code>$ ack about --ignore-dir=downloads</code></p>

<ol>
<li>只搜索包含&#8217;protected&#8217;单词的PHP文件，然后通过文件名把搜索结果整合在一起，打印每个文件对应的搜索结果:</li>
</ol>


<p><code>$ ack --php --group protected</code></p>

<ol>
<li>获取包含&#8217;CFLAG&#8217;关键字的Makefile的文件名。文件名为*.mk,makefile,Makefile,GNUmakefile的都在考虑范围内:</li>
</ol>


<p><code>$ ack --make -l CFLAG</code></p>

<ol>
<li>显示整个日志文件时高亮匹配到的字符串:</li>
</ol>


<p><code>$ tail -f /var/log/syslog | ack --passthru 192.168.1.10</code></p>

<ol>
<li>要换取ack支持的文件过滤类型，运行：</li>
</ol>


<p><code>$ ack --help-type</code></p>

<hr />

<p><a href="http://xmodulo.com/2014/01/search-text-files-patterns-efficiently.html">原文地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用kindle笔记来做fortune名言后的玩法]]></title>
    <link href="http://jonathan-li.me/blog/2014/02/18/shi-yong-kindlebi-ji-lai-zuo-fortuneming-yan/"/>
    <updated>2014-02-18T14:48:00+08:00</updated>
    <id>http://jonathan-li.me/blog/2014/02/18/shi-yong-kindlebi-ji-lai-zuo-fortuneming-yan</id>
    <content type="html"><![CDATA[<p>kde桌面上有一个fortune插件，可随机显示名言名句，但是默认的都是英文的名句，看了没什么意思，于是我想到用我在kindle上的笔记来做名言显示给自己看，多有意义，又能经常温习之前读过的好书。</p>

<p>首先说下<code>fortune</code>，这是一个随机显示名言名句的linux命令行软件，算是比较简单而又非常有名的Linux程序了,安装相信应该不用我说了。fortune安装好后默认有许多英文名言，如果装了中文包的话可能还有唐诗300首。fortune支持使用自定义文本来做名言。</p>

<!-- more -->


<p>于是我把昨天的写的<code>kindle-clips</code>脚本升级了下，加了个导出到<code>fortune</code>格式的功能。程序见<a href="https://github.com/minejo/kindle-clips">My Github</a>,怎么使用这个脚本导出<code>fortune</code>格式的文本我这里也不说了，github项目的wiki里面写的很清楚，我主要来探索下怎么玩这个<code>fortune</code>。</p>

<h2>玩法1</h2>

<p>使用cowsay和cowthink来图形化kindle摘录，使的看起来不那么枯燥。</p>

<p><a href="https://gist.github.com/minejo/9066719">脚本</a>：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>!/usr/bin/bash&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>author:jonathan&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>version:1.0&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>Cownumber=$(($RANDOM%4+1))
</span><span class='line'>case $Cownumber in
</span><span class='line'>0)
</span><span class='line'>    cow=&ldquo;moose&rdquo;;;
</span><span class='line'>1)
</span><span class='line'>    cow=&ldquo;tux&rdquo;;;
</span><span class='line'>2)
</span><span class='line'>    cow=&ldquo;daemon&rdquo;;;
</span><span class='line'>3)
</span><span class='line'>    cow=&ldquo;surgery&rdquo;;;
</span><span class='line'>4)
</span><span class='line'>    cow=&ldquo;elephant&rdquo;;;
</span><span class='line'>*)
</span><span class='line'>    cow=&ldquo;tux&rdquo;;;
</span><span class='line'>esac&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Cmnumber=$(($RANDOM%1+1))
</span><span class='line'>case $Cmnumber in
</span><span class='line'>    0)
</span><span class='line'>        command=&ldquo;cowsay&rdquo;;;
</span><span class='line'>    1)
</span><span class='line'>        command=&ldquo;cowthink&rdquo;;;
</span><span class='line'>    *)
</span><span class='line'>        command=&ldquo;cowsay&rdquo;;;
</span><span class='line'>esac&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>/usr/bin/fortune /path/to/kindle-fortune | $command -f $cow</span></code></pre></td></tr></table></div></figure></p>

<p>效果如下：
<img src="/images/blog_kindle_fortune_t.png"></p>

<p>同时你可以把这个脚本加到<code>.bashrc</code>中，这样每次打开终端就能看到笔记啦。</p>

<h2>玩法2</h2>

<p>利用kde的桌面插件<code>Fortune</code>来显示，很简单，直接在自定义命令那写上：</p>

<pre><code>fortune /path/to/kindle-fortune -l
</code></pre>

<p>效果图：
<img src="/images/blog_kindle_fortune.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我最喜欢的Linux应用]]></title>
    <link href="http://jonathan-li.me/blog/2014/02/16/wo-zui-xi-huan-de-linuxying-yong/"/>
    <updated>2014-02-16T20:25:00+08:00</updated>
    <id>http://jonathan-li.me/blog/2014/02/16/wo-zui-xi-huan-de-linuxying-yong</id>
    <content type="html"><![CDATA[<ul>
<li>发行版：Arch</li>
<li>桌面环境：KDE</li>
<li>浏览器：Chromium</li>
<li>终端：Terminator</li>
<li>编辑器：Vim</li>
<li>输入法：Fcitx-rime</li>
<li>云端备份：Dropbox</li>
<li>音乐客户端：Clementine</li>
<li>影片客户端：Smplayer</li>
<li>启动器：Synapse</li>
<li>桌面启动器：Cairo-dock</li>
<li>邮件客户端：ThunderBird</li>
<li>图形处理：GIMP</li>
<li>图片管理：Shotwell</li>
<li>即时通讯：Kopete</li>
<li>FTP管理：Filezilla</li>
<li>文本处理：WPS office</li>
<li>图书管理：Calibre</li>
<li>思维导图：Xmind</li>
<li>字典软件：StarDict</li>
<li>流程图处理软件：Dia</li>
<li>截屏软件：Shutter</li>
<li>云端笔记：Wiznote</li>
<li>项目开发：Eclipse,Vim</li>
<li>MySQL管理：wine带SQLyog</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决chromium播放豆瓣fm重影问题]]></title>
    <link href="http://jonathan-li.me/blog/2014/01/27/jie-jue-chromiumbo-fang-dou-ban-fmzhong-ying-wen-ti/"/>
    <updated>2014-01-27T12:22:00+08:00</updated>
    <id>http://jonathan-li.me/blog/2014/01/27/jie-jue-chromiumbo-fang-dou-ban-fmzhong-ying-wen-ti</id>
    <content type="html"><![CDATA[<p>由于在linux下用惯了chroium，更新快，最适合我们这帮爱折腾的人了。但是chromium放豆瓣fm的时候flash会出问题，即歌名会重影。</p>

<p>去论坛查了下，原来是chromium用的flash版本是11.2,而chrome的flash是11.7，要么换成chrome，要么手动装个高版本flash。</p>

<p>还有aur社区有人想到了，发布了AUR/chromium-pepper-flash，自行装上这个，装完之后在chroium的chrome://plugins/的页面，点下detail，然后找到所有和flash有关的item，除了第一个，其他都给禁了就可以了。</p>

<p>mark一下。</p>
]]></content>
  </entry>
  
</feed>
